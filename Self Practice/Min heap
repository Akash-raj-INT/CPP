Certainly! Here's a simple implementation of a min heap in C++:

```cpp
#include <iostream>
#include <vector>

class MinHeap {
private:
    std::vector<int> heap;

    void heapifyUp() {
        int index = heap.size() - 1;
        while (index > 0) {
            int parentIndex = (index - 1) / 2;
            if (heap[index] < heap[parentIndex]) {
                std::swap(heap[index], heap[parentIndex]);
                index = parentIndex;
            } else {
                break;
            }
        }
    }

    void heapifyDown() {
        int index = 0;
        while (true) {
            int leftChildIndex = 2 * index + 1;
            int rightChildIndex = 2 * index + 2;
            int smallest = index;

            if (leftChildIndex < heap.size() && heap[leftChildIndex] < heap[smallest]) {
                smallest = leftChildIndex;
            }

            if (rightChildIndex < heap.size() && heap[rightChildIndex] < heap[smallest]) {
                smallest = rightChildIndex;
            }

            if (smallest != index) {
                std::swap(heap[index], heap[smallest]);
                index = smallest;
            } else {
                break;
            }
        }
    }

public:
    void push(int value) {
        heap.push_back(value);
        heapifyUp();
    }

    int pop() {
        if (heap.empty()) {
            return -1; // or any sentinel value indicating heap is empty
        }

        if (heap.size() == 1) {
            int root = heap.front();
            heap.pop_back();
            return root;
        }

        int root = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        heapifyDown();
        return root;
    }
};

int main() {
    MinHeap minHeap;

    minHeap.push(4);
    minHeap.push(2);
    minHeap.push(8);
    minHeap.push(5);

    std::cout << "Popped: " << minHeap.pop() << std::endl;
    std::cout << "Popped: " << minHeap.pop() << std::endl;

    return 0;
}
```

This C++ code defines a `MinHeap` class with methods to push and pop elements while maintaining the min heap property. The `main` function demonstrates the usage of the `MinHeap` class by pushing elements onto the heap and popping elements from it.
