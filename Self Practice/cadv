#include <iostream>
#include <vector>

struct TreeNode {
    int key;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : key(value), left(nullptr), right(nullptr) {}
};

void inOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left);
    std::cout << root->key << " ";
    inOrderTraversal(root->right);
}

TreeNode* deleteRoot(TreeNode* root) {
    if (root == nullptr) {
        return nullptr;
    }

    TreeNode* newRoot = nullptr;

    if (root->left == nullptr) {
        newRoot = root->right;
        delete root;
        return newRoot;
    }

    TreeNode* current = root->left;
    TreeNode* parent = nullptr;

    while (current->right != nullptr) {
        parent = current;
        current = current->right;
    }

    if (parent == nullptr) {
        newRoot = root->right;
    } else {
        parent->right = current->left;
        current->left = root->left;
        current->right = root->right;
        newRoot = current;
    }

    delete root;
    return newRoot;
}

int main() {
    int n;
    std::cin >> n;

    if (n == 1) {
        std::cout << "Cannot Delete Root" << std::endl;
        return 0;
    }

    std::vector<int> values(n);

    for (int i = 0; i < n; i++) {
        std::cin >> values[i];
    }

    TreeNode* root = new TreeNode(values[0]);

    for (int i = 1; i < n; i++) {
        insert(root, values[i]);
    }

    root = deleteRoot(root);

    inOrderTraversal(root);
    std::cout << std::endl;

    return 0;
}
